<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 鯖の味噌煮がおいしく炊けない</title>
    <link>https://miso.sabanium.me/post/</link>
    <description>Recent content in Posts on 鯖の味噌煮がおいしく炊けない</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-JP</language>
    <lastBuildDate>Fri, 04 Feb 2022 15:12:08 +0900</lastBuildDate><atom:link href="https://miso.sabanium.me/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>中動態の世界 メモ</title>
      <link>https://miso.sabanium.me/post/midvoice/</link>
      <pubDate>Fri, 04 Feb 2022 15:12:08 +0900</pubDate>
      
      <guid>https://miso.sabanium.me/post/midvoice/</guid>
      <description>先に中動態とは何かということをざっくりと記しておく。以下はwikipediaからぱちってきたやつ。
[200~中動態（ちゅうどうたい、ラテン語: [genus] medium、英語: middle [voice]）は、インド・ヨーロッパ語族の態のひとつ。能動態とは人称語尾によって区別される。中動態と受動態は形態の上で区別されないことが多い。中動態がよく残っている言語にサンスクリット、古代ギリシア語、アナトリア語派などがある。
　現代では能動対受動であることに対して、昔は能動対中動であったという感じの話らしい。 それを念頭に置きつつ。
   プロローグ  依存症患者のケア施設の人（多分）との会話。 「回復するとは回復することである」、という一般の意味体系とは違った意味の話。 薬物をやらないという強い意志を抱くことではなく、ただ回復という態度に回復を任せるようなもの（？）。
『ただ回復するというプロセスがあるんだ、と』 言語が消滅する前に、p21より
   第一章  私が為すということに、意志は関わっているのか？という問題。
意志 := 物事を意識しつつ働きを為す力、である。 夢遊病患者は意識がないから意志をしない / がない。 でも意志はあたかも意識から自由になっているかのように語られている。 そこに矛盾がある。 さらに、意志があればその選択に責任が生ずる。 でも自由であって自由でないのに？
スピノザは行為の原因が意識されず、ただそれが意志であると錯覚しているという。 そこで自由意志は自由に意志をもって行為を企図するということではなく、強制された行為を自由な意志で行ったと解釈するということ。
例：私は歩いている。 歩いているという選択をしたのは私だが、歩くことの一挙一動を意志としてもって歩いているのか？No. 私は歩くということを思ってはいるかもしれないが、実際に訪れるのは私の体が歩行をするという状態である。 私は歩くから私の体が歩行をする、という表現の引き算をするとそこには意志があることになる。 もしくは、構文自体に意志が宿っているとも言えるかもしれない。
それを能動態vs中動態という区分で考える。
   第二章  中動態の起源を考えていく。
アリストテレスとかを参照しつつ、まずは中動態が受動態より先にあったことがわかる。 次に文法書の標準となった「テクネー」の読解における能動と受動というテーマが読解において反復され続けてきたといっている。
   第三章  そこで、バンヴェニストを参照して能動ー受動が「為す」、「為される」の関係にあるのに対して能動ー中動が「過程の外にある」、「過程の中にある」という関係であることがわかった。 他に「在る」、「生きる」ということが能動態であることも書かれているがつながりがよくわからない。 最後に、アーレントの古代ギリシアでは意志という観念がなかったのではないか、というところで終わる。
   第四章  デリダのバンヴェニスト批判の話だけど、バンヴェニストが概ね言っていることは言語には思考の可能性を制約する作用があり、哲学は中道体の抑制の上に発展してきた、ということ。 ここらへんの話はスノウ・クラッシュの中のシュメール人の話っぽくて面白い。</description>
    </item>
    
    <item>
      <title>Ctags</title>
      <link>https://miso.sabanium.me/post/ctags/</link>
      <pubDate>Tue, 01 Feb 2022 13:39:55 +0900</pubDate>
      
      <guid>https://miso.sabanium.me/post/ctags/</guid>
      <description>vimと相性がいいctagsを使いたい。
   インストール  universal ctagsをう。
なんかsnapでしか提供されていないけどあんま好きじゃないので、ソースからビルドする。 最後のmakeのところだけsudo make installじゃないと\usr\local\binにアクセスできないので特権を与える。
    </description>
    </item>
    
    <item>
      <title>哲学の起源メモ</title>
      <link>https://miso.sabanium.me/post/origin_of_philosophy_kojin/</link>
      <pubDate>Mon, 17 Jan 2022 17:18:53 +0900</pubDate>
      
      <guid>https://miso.sabanium.me/post/origin_of_philosophy_kojin/</guid>
      <description>   序論   普遍宗教    なぜ紀元前６世紀に同時多発的に思想家・宗教家が生じたのか。
  マルクス主義では哲学・宗教を経済的基盤の上部構造として見る＝経済的な変化を仮定するが、必ずしも上手く説明できているわけではない。
  宗教ベースで考えても、辻褄が合わない（ベルクソンの「愛の飛躍」）。
  交換様式で説明できるのではないか。以下交換様式。
      様式A 様式B 様式C 様式D     定義 贈与 支配-被支配 商品交換 システムの下での様式A      アニミズムにおける呪術は死者への贈与を通した霊の鎮静化(様式A)
  呪術は贈与を通じて死者を物体として扱うためのテクノロジー的なもの
  定住によって発達した（定住すると霊はコストになる）。
  まだ神との間に贈与しあいという考えがある。
  世界的な帝国になるためには軍事力＋経済力（様式B、C）が必要。
  普遍宗教は、様式Aが解体されたのちにより高次なものとしてそれを再構成する（様式D）もの。
  そのために宗教は脱呪術化する必要がある＝神を人に従わせない態度が必要（＝「神強制」ではなく「神礼拝」）。
  例：ユダヤ教   作られたストーリーということに留意。 ユダヤ系の遊牧民が外圧により定住した。集団として新たな神を信奉した（まだ「神強制」）。 戦争に負けてバビロンの捕囚となった人たちは商人で知識階層が多かった（農耕民でも旧統制機構の下でもない）。 彼らは個人として神と契約した（＝集団としての「神強制」ではなく、「神礼拝」）。 その後、バビロンから帰還した際にユダヤ教が成立した。  模範的預言者   ウェーバーは同時代の思想家と宗教家をくくり、預言者とした。実践か言論かの違い。 宗教と哲学をわけることにあまり意味はない。イスラエルの預言者は吟味された人の言葉で、古代ギリシャ哲学の源泉はイオニアの神批判である。 中国に関してもおなじ。無為自然は様式A、様式Bによって成り立つ世の否定。仁義は様式A、Bではない倫理の模索（＝様式D)。     第一章  </description>
    </item>
    
    <item>
      <title>Pandoc</title>
      <link>https://miso.sabanium.me/post/pandoc/</link>
      <pubDate>Mon, 17 Jan 2022 02:13:58 +0900</pubDate>
      
      <guid>https://miso.sabanium.me/post/pandoc/</guid>
      <description>公式reference
Pandocってなんだよ→マークダウンをいい感じにhtml/tex/pdf等にしてくれる便利なライブラリ
    出力形式  -o で出力指定　-sで分割されていない状態として出力
pdfはtexをかんでしまう(=日本語が使えない)ので、lualatexを使わざるを得ない。 指定の仕方としては例えば
--pdf-engine=lualatex とする。
フォント指定は-Vとか。 luaではluatexjapresetoptionsみたいなのが使える上に、フォントもちゃんと指定できる（俺にはIPA、お前しかいないんだ&amp;hellip;)
   美しくする  -N: セクションというか章の前に数字をつける。</description>
    </item>
    
    <item>
      <title>CISCO 操作メモ</title>
      <link>https://miso.sabanium.me/post/cisco/</link>
      <pubDate>Sun, 16 Jan 2022 17:10:15 +0900</pubDate>
      
      <guid>https://miso.sabanium.me/post/cisco/</guid>
      <description>操作方法チートシート     スイッチ系  特権モードに切り替え
enable 現在のconfig
show running-config / show run copy current configuration file to the startup configuration file
copy running-config startup-config terminal configuration
configure terminal / config t    configuration  line console config
console line (num) line console password
password (password) login enable password
enable password (passwd) enable secret
enable secret (passwd) encryption
service password-encryption message of the day</description>
    </item>
    
    <item>
      <title>存在と時間メモ</title>
      <link>https://miso.sabanium.me/post/ex_and_time/</link>
      <pubDate>Sat, 15 Jan 2022 17:06:56 +0900</pubDate>
      
      <guid>https://miso.sabanium.me/post/ex_and_time/</guid>
      <description>底本は光文社古典新訳文庫「存在と時間」（訳：中山元）。
   001  存在は問われていない（＝自明なものとみなされている）。 存在の意味を解釈することで、時間を通じて存在了解（＝？）を可能にする。
   002  略
   序論     第一章 第一節     003  存在は忘れられた。
   004  存在は、もっとも普遍的で空虚な概念（＝議論のうちのプリミティブな概念)であるとされ、自明なものとされた。
   005  存在が自明であるとの先入観を抱かせた先入観は、古代の存在論を起源としている。 その検討のために、存在についての問いとその答えを明らかにしなければならない。 そのためにここで検討する先入観は3つある。
   006 1. 存在の概念の普遍性  存在はもっとも普遍的であるとされる。 しかし、存在の普遍性は類(カテゴリーのこと)の普遍性ではない(これはアリストテレス？的な分類における種と類における類)。 存在者（存在するもの？）が類と種によって構造化されるなら、存在は類になることができない（すなわち、述語になれない）。 存在は「超越概念」である。 なんらかの事柄は、その一番の抽象化で多様な類によって記述されるが、存在はそれを超越してあらゆる物事をその射程に収めてしまう。 そこで、その存在の性質について「類比による統一」と名をつけた。 つまり、存在が普遍的であることは自明ではないし、あらゆる事物に対して適用可能なのも自明ではない。
   007 2. 存在の定義不能性について  存在を定義することはできない。 それは(アリストテレスに従うならば)最も近い種との類差によって定義することができないということでもあり、何らかの存在者によって、もしくは上位下位の概念から定義できないということでもある。 ただし、これは「存在」が存在者のようなものではない、という事実と、定義を用いて存在を形作るということができないということを示唆するだけに過ぎない。
   008 3.</description>
    </item>
    
    <item>
      <title>四方対象読書メモ</title>
      <link>https://miso.sabanium.me/post/quadraple/</link>
      <pubDate>Sat, 08 Jan 2022 17:44:20 +0900</pubDate>
      
      <guid>https://miso.sabanium.me/post/quadraple/</guid>
      <description>オブジェクト指向存在論ってなんだよ。
   1章  「対象」とはなに？素朴な観点からはもののこと。トマトは対象。アンパンマンも実在はしていないが対象。実在・非実在、物理的・非物理的にかかわらずそう認識されていれば対象。
その「対象」に対していままで取られてきたアプローチには3つの方法があると指摘。
 解体  　いろいろなもの（例：ろうそくの火）とかはあるけど、より基本的な要素に還元可能だよね、という主張。 古くはタレスの水とか。 そこから派生して、統一されたもの（アペイロン）から分割されたり、分割されたものがあらゆるものに進化しうる可能性を持つなどの考えもこれに当てはまる。
　批判は難しそうだったので追記。
埋却  　ものはより大きな性質の一部だよね、という主張。 経験論では、りんごを「赤」などの何らかの性質を寄せ集めた性質の束であり（有限か無限かは議論されていないが、まあとりあえず有限ということにしておかないと面倒くさいのでそうする）、習慣的に経験する性質の集合のニックネームであるとする。
　対象が経験の中にないなら、経験の外について考えればいいのだが、その対象の実在を仮定することはできない（当たり前だが）。 そこで、経験の外の世界を否定する立場と、対象が経験自体である（＝世界、あるいは事物との相関にしかアクセスできない）という立場が現れる。 後者を相関主義という。 さらに、相関主義を推し進めて、人間と世界が特別なのではなく、事物の性質は事物と事物の関係によって基礎付けられるとの考えもある。 これは関係主義である。
　これらはいずれも対象をより大きなもの（性質、相関、関係）の中にまとめ上げることである。 これの批判はなんか難しそうだったので追記。
解体して埋却  　いや唯物論を推し進めた先の事物の性質は語れるんじゃね？という主張。 たし🦀。 個別の対象ではなく、原子についての性質は述べられたりするよね、ということであらゆる対象は原子にまで分割可能だけど原子自体の性質を語ることはできるから、解体して埋却している。 :thinking_face:になるけど、結局は経験が必要になる以上、存在に対していらんもん加えてるから今度は経験の実在を検証する必要があるよね。 逆に経験のみから対象を議論するためには外部のもの（神とか亡霊とか）が必要になるからこっちも論点をすり替えているだけであんまり意味がない。
対象  　じゃあ何を議論すればいいんだ、というところで対象が出てくる。 ソクラテスは「メノン」で執拗に徳について問うていたが（ちょっとキモいレベルで）、その徳の実在については全く触れなかった。 彼（あるいは彼女）が触れていたのは徳の性質のみであって、それは対象が性質よりもより深い層にあるということである。 例としては、りんごを食べるときに我々が感じるのはりんごの果肉の食感と甘さとかすかな酸っぱさであり、視覚的な赤さではあるが、これで本当にりんごを食べているかというとそうではない。 りんごの性質に操作を加えたかもしれないが、それは対象とするりんご本体にアクセスしている訳ではないということ（例が下手くそ）。
　対象についてはこんな感じ。むずいっす。</description>
    </item>
    
    <item>
      <title>Rust覚え書き</title>
      <link>https://miso.sabanium.me/post/rust/</link>
      <pubDate>Thu, 23 Dec 2021 16:42:30 +0900</pubDate>
      
      <guid>https://miso.sabanium.me/post/rust/</guid>
      <description>First, you&amp;rsquo;d better refer to Rust by Example for best solutions (of course, they&amp;rsquo;re the pro!).
   入出力  String型のbufへの入力
use std::io::Read; fn main() { let mut buf = String::new(); std::io::stdin().read_to_string(&amp;amp;mut buf).unwrap(); } i64型の配列への入力
let mut iter = buf.split(&amp;quot;\n&amp;quot;); let v1:Vec&amp;lt;i64&amp;gt; = iter.next().unwrap().split_whitespace().map(|x| x.parse::&amp;lt;i64&amp;gt;().unwrap()).collect(); もしくは可読性を上げて
let mut iter = buf.split(&amp;quot;\n&amp;quot;); let v1:Vec&amp;lt;i64&amp;gt; = iter.next().unwrap().split_whitespace().map(|x| { x.parse::&amp;lt;i64&amp;gt;().unwrap() }).collect();    配列  VectorでもArrayでもいい。Collect()するとVec&amp;lt;T&amp;gt;になる。
Arrayの初期化
分かっている状態での初期化 let arr: [T; num of elements] = [直書き] 繰り返したいとき let arr: [T; num of elements] = [elem; num of elements]    debug  type check</description>
    </item>
    
    <item>
      <title>i3wmをubuntuで導入し、いい感じにする</title>
      <link>https://miso.sabanium.me/post/i3/</link>
      <pubDate>Tue, 21 Dec 2021 00:16:14 +0900</pubDate>
      
      <guid>https://miso.sabanium.me/post/i3/</guid>
      <description>これはRICORA言語班 Advent Calendarの18日目の記事です。新入生相手におままごとをしていたら完全に書くのを忘れていたので、適当なことを書きます。すみません。
   背景  windows10をサクサク動かせないPCを普段使いするためにはどうすればいいのだろうか？という問題が与えられたとき、大体ubuntuとかlinux mintみたいな軽量ディストロがおすすめされると思うのですが、あえてウィンドウマネージャーの方から攻めてみたいと思ったので書きます。
   導入とか  dotfileとかどうせ上げてるんだろ？ → はい。これです。見たければ見てもいいよ。
i3はフリーソースのタイル型ウィンドウマネージャです。 タイル型ウィンドウマネージャは、画面上のアプリケーションを画面を埋めるように配置します。
個人的に感じるi3のメリットは、カーソルを動かす必要がない（＝キーボード上で操作が完結する）ことと、バッテリーの持ちが非常に良くなることです。 もちろんacpiで充電の上限は設けていますが、大体70%充電しておけば６時間程度は使えるはずです。 さらに、fehなどを用いることで背景を設定することもでき、i3barやi3statusを調整することで、天気やバッテリー情報などを常時表示することもできます。
   導入方法  i3は文献があまりになさすぎるので、いつものarch wikiに全面的に頼ることになります。 私も全面的に頼りました。
archで入れているわけではないので、ubuntuを使いつつ入れる方法を説明します。
公式でおすすめされているのは、配布されているtarballを用いる方法ですが、aptでも拾ってこれます。
sudo apt install i3 i3-wm このくらいで十分だった気がする。 足りなくなったら都度足してください。
i3をインストールすると、ログイン画面の右下に歯車マークが出て、ログイン後のウィンドウマネージャが選べるようになります。 これでi3を選択してログインすれば、無事にインストール完了です。
   操作  i3はまあまあ独特な動きをします（vimよりは習得コストが低いかもしれない）。 キーマップの完全版はDefault Keybindingsを参照してください。
i3を使う際にはmodと呼ばれる特殊キーを設定する必要があります。 私はaltキーに設定して使っていますが、このmodキーと何らかのキーを同時に押すことで画面の操作を行います。
例えば、mod + 1なら1番目のウィンドウに移動します。 また、mod + shift + 1なら現在のウィンドウを1番目のウィンドウに移動させます。 意味がわかりませんね。手を動かさないと理解できないので自分で頑張ってi3を使ってみてください。
   i3  i3の設定ファイルは、ルート直下の.config/i3/configになります。 デフォルトでは生成されていなかったと思うので、そのようなファイルを新しく作って設定してあげると勝手にファイルを見に行ってくれます。 確か開発レポジトリをクローンしてきてブランチをcheckoutするとデフォの設定が入っているconfigがあるはずです。 おそらく初見で利用する際にはそれをコピー・コピーアンドペーストするといいと思います。</description>
    </item>
    
    <item>
      <title>雑記</title>
      <link>https://miso.sabanium.me/post/other/</link>
      <pubDate>Tue, 21 Dec 2021 00:14:34 +0900</pubDate>
      
      <guid>https://miso.sabanium.me/post/other/</guid>
      <description>HHKBのキーボードコンフィギュレーション  sudo dpkg-reconfigure keyboard-(something).
HHKBをwindows - alt-win入れ替え にするとx250と同じ感じでaltとwinの入れ替えができるようになる。</description>
    </item>
    
    <item>
      <title>The Road to Monads: Monadについて</title>
      <link>https://miso.sabanium.me/post/monad/</link>
      <pubDate>Mon, 06 Dec 2021 11:20:40 +0900</pubDate>
      
      <guid>https://miso.sabanium.me/post/monad/</guid>
      <description>この記事はThe Road to Monadsを意訳したものであり、RICORA Advent Calendarの11日目の記事です。
   Monad  今までの流れを振り返ると、Functorは何らかの値のWrapperであり、fmapによってその要素に関数適用ができた。 Applicative Functorはそれをさらに発展させて、関数自体をFunctorで包むことによって、複数の引数を取る関数を実装できるようにしていたのだった。
さて、何が足りないのだろう？ 実は、Applicative Functorだけでは関数を複数組み合わせることが難しい。 例えば、f :: a -&amp;gt; bとg :: b -&amp;gt; cがあったときに、Applicative Functorだとa -&amp;gt; f b、b -&amp;gt; f cに写すことはできてもa -&amp;gt; f cに写すことができない。 こういう関数の使い方をする機会は割と多い気がするし、こんな感じで書きたくない？という話。
簡単にいえば、MonadはFunctorの中での関数合成を可能にする構造。 しかし、これだけだとMonadが実際に何をするかいまいちわからないので以下に書いていく。 導入として、大体FunctorみたいなものだとしてMonadmを使うことにしよう(とはいっても、実装上は拡張したApplicative型なんだからFunctorの拡張として捉えるほうが適切かもしれない）。
じつはMonadは他の必要っぽいことも包摂してくれている。
 Monad上の関数の繰り返し適用に対して、Monadを圧縮する。a -&amp;gt; m bに対してまたfmapをつかってmを適用すると、m a -&amp;gt; m (m -&amp;gt; b)になってしまう。 例えば、a -&amp;gt; Maybe bならMaybe a -&amp;gt; Maybe ( Maybe b )的な。 これを圧縮して、繰り返し適用してもa -&amp;gt; Maybe bの型を作れるようにする。 さっきの例。 a -&amp;gt; m bとb -&amp;gt; m cからa -&amp;gt; m cの関数を作りだせる。 逆にm aが与えられたとき、a -&amp;gt; m bの関数を使えるようにする。     型の圧縮  まあこれだけだとよくわからないので、具体例を考えよう。 1 / sqrt (x)をMaybeを返すとして考える。 この関数を二つの関数1 / xとsqrt(x)の合成で考えるとすると、例えば1/0はundefinedなので、1 / xでx = 0ならNothingを返したい。 これはsqrt(x)でも一緒。x &amp;lt; 0ならNothingを返したい。 そこで、これらを実際に書いてみるとこんな感じ。</description>
    </item>
    
    <item>
      <title>The Road to Monads: Applicativeについて</title>
      <link>https://miso.sabanium.me/post/applicative/</link>
      <pubDate>Sun, 05 Dec 2021 11:22:10 +0900</pubDate>
      
      <guid>https://miso.sabanium.me/post/applicative/</guid>
      <description>この記事はThe Road to Monadsを意訳したものであり、RICORA Advent Calendarの9日目の記事です。
   Applicative Functor  FunctorはWrapperで、fmapを使えば(a -&amp;gt; b)-&amp;gt;(f a -&amp;gt; f b)という風にFunctorの要素に対して関数を適用できたのだった。 もちろん、これはカリー化されているので結局(a -&amp;gt; b) -&amp;gt; f a -&amp;gt; f bと同じことである。
でもこれだと問題があって、例えば
f :: Int -&amp;gt; Int -&amp;gt; Int f a b = a * b みたいな関数をMaybe Intで置き換えて使おうと思ったときに使えない。 というか単純に一変数関数にしか使えん。 これはけっこうだるい。
そこで、その代替策がApplicativeなのだがこれもこれとして理解し難い。 まずは関数定義から見てみよう。
class functor f =&amp;gt; Applicative f where pure :: a -&amp;gt; f a (&amp;lt;*&amp;gt;) :: f (a -&amp;gt; b) -&amp;gt; f a -&amp;gt; f b ここで()に囲まれているのは中置関数（ここでは演算子とよぶ）であることを思い出そう。 すると、まずpureはある型aからFunctor a型に移すようなものだとわかる。 pureはfunctorのデフォルトであるべき（らしい）なので、簡単な例だとMaybeに対して</description>
    </item>
    
    <item>
      <title>The Road to Monads: Functorについて</title>
      <link>https://miso.sabanium.me/post/functor/</link>
      <pubDate>Sat, 04 Dec 2021 22:45:30 +0900</pubDate>
      
      <guid>https://miso.sabanium.me/post/functor/</guid>
      <description>この記事はThe Road to Monadsを意訳したものです。 あんまり難しいことは言っていないと思うんだけど、あまり頭に入らなかったので簡単に翻訳してみた。
   Functor     fmap  Functorって何? 内部の値にアクセスできるようにしたWrapper。具体例: IO、Maybeなど。 圏論でいうところの関手。
コードでの具体例：
addMaybe :: Num a =&amp;gt; Maybe a -&amp;gt; Maybe a -&amp;gt; Maybe a addMaybe (Just a) (Just b) = Just (a + b) addMaybe _ _ = Nothing 確かに内部の値にアクセスしている。まあこれは恣意的な関数だけど。 ただし、これを一般化するといい感じになってくれる。 要は内部の値にアクセスすることが重要で、例えばf :: Int -&amp;gt; Intはこういう関数を使うことでMaybe Intにも使えるようになったりする。
次に、こんな関数を考える。
fmapList :: (a -&amp;gt; b) -&amp;gt; ([a] -&amp;gt; [b]) fmapList f [] = [] fmapList f (x:xs) = f x : fmapList f xs これはmap関数と変わらない。 ある関数をリストのすべての要素に適用するだけだ。</description>
    </item>
    
    <item>
      <title>Haskell覚え書き</title>
      <link>https://miso.sabanium.me/post/c-haskell1/</link>
      <pubDate>Sat, 04 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://miso.sabanium.me/post/c-haskell1/</guid>
      <description>構文解析のためのモナド等についてまとめる。完全に自分用。
   Haskellの文法について  よく見るやつ
 型拘束  (Ord a) =&amp;gt; a -&amp;gt; a  要素の存在  (x:xs) </description>
    </item>
    
    <item>
      <title>HaskellでCコンパイラもどきを作る #0</title>
      <link>https://miso.sabanium.me/post/c-haskell0/</link>
      <pubDate>Fri, 03 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://miso.sabanium.me/post/c-haskell0/</guid>
      <description>まず環境構築をする。
   Haskellのインストール  これを読んで、GHCupとHaskell Tool Stackの一番上の方にのってるcurlコマンドを叩く。
curl --proto &#39;=https&#39; --tlsv1.2 -sSf https://get-ghcup.haskell.org | sh curl -sSL https://get.haskellstack.org/ | sh LSPは必要なので入れて、それ以外のものにも大体Yesと回答した気がする。なんかPとか押させるのが厄介。
   Haskell Language Serverの導入  vim-lsp-settingsはHaskell Language Server(以下HLS)に対応していないがvim-lsp-settingsのissueを読むとそういうことが書いてあるので.vimrcを適当にいじるとうまくHLSが動く。
これでGHC+HLSが入った環境が準備できた。</description>
    </item>
    
  </channel>
</rss>
