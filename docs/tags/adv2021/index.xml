<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Adv2021 on 鯖の味噌煮がおいしく炊けない</title>
    <link>https://miso.sabanium.me/tags/adv2021/</link>
    <description>Recent content in Adv2021 on 鯖の味噌煮がおいしく炊けない</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-JP</language>
    <lastBuildDate>Tue, 21 Dec 2021 00:16:14 +0900</lastBuildDate><atom:link href="https://miso.sabanium.me/tags/adv2021/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>i3wmをubuntuで導入し、いい感じにする</title>
      <link>https://miso.sabanium.me/post/i3/</link>
      <pubDate>Tue, 21 Dec 2021 00:16:14 +0900</pubDate>
      
      <guid>https://miso.sabanium.me/post/i3/</guid>
      <description>これはRICORA言語班 Advent Calendarの18日目の記事です。新入生相手におままごとをしていたら完全に書くのを忘れていたので、適当なことを書きます。すみません。
   背景  windows10をサクサク動かせないPCを普段使いするためにはどうすればいいのだろうか？という問題が与えられたとき、大体ubuntuとかlinux mintみたいな軽量ディストロがおすすめされると思うのですが、あえてウィンドウマネージャーの方から攻めてみたいと思ったので書きます。
   導入とか  dotfileとかどうせ上げてるんだろ？ → はい。これです。見たければ見てもいいよ。
i3はフリーソースのタイル型ウィンドウマネージャです。 タイル型ウィンドウマネージャは、画面上のアプリケーションを画面を埋めるように配置します。
個人的に感じるi3のメリットは、カーソルを動かす必要がない（＝キーボード上で操作が完結する）ことと、バッテリーの持ちが非常に良くなることです。 もちろんacpiで充電の上限は設けていますが、大体70%充電しておけば６時間程度は使えるはずです。 さらに、fehなどを用いることで背景を設定することもでき、i3barやi3statusを調整することで、天気やバッテリー情報などを常時表示することもできます。
   導入方法  i3は文献があまりになさすぎるので、いつものarch wikiに全面的に頼ることになります。 私も全面的に頼りました。
archで入れているわけではないので、ubuntuを使いつつ入れる方法を説明します。
公式でおすすめされているのは、配布されているtarballを用いる方法ですが、aptでも拾ってこれます。
sudo apt install i3 i3-wm このくらいで十分だった気がする。 足りなくなったら都度足してください。
i3をインストールすると、ログイン画面の右下に歯車マークが出て、ログイン後のウィンドウマネージャが選べるようになります。 これでi3を選択してログインすれば、無事にインストール完了です。
   操作  i3はまあまあ独特な動きをします（vimよりは習得コストが低いかもしれない）。 キーマップの完全版はDefault Keybindingsを参照してください。
i3を使う際にはmodと呼ばれる特殊キーを設定する必要があります。 私はaltキーに設定して使っていますが、このmodキーと何らかのキーを同時に押すことで画面の操作を行います。
例えば、mod + 1なら1番目のウィンドウに移動します。 また、mod + shift + 1なら現在のウィンドウを1番目のウィンドウに移動させます。 意味がわかりませんね。手を動かさないと理解できないので自分で頑張ってi3を使ってみてください。
   i3  i3の設定ファイルは、ルート直下の.config/i3/configになります。 デフォルトでは生成されていなかったと思うので、そのようなファイルを新しく作って設定してあげると勝手にファイルを見に行ってくれます。 確か開発レポジトリをクローンしてきてブランチをcheckoutするとデフォの設定が入っているconfigがあるはずです。 おそらく初見で利用する際にはそれをコピー・コピーアンドペーストするといいと思います。</description>
    </item>
    
    <item>
      <title>The Road to Monads: Monadについて</title>
      <link>https://miso.sabanium.me/post/monad/</link>
      <pubDate>Mon, 06 Dec 2021 11:20:40 +0900</pubDate>
      
      <guid>https://miso.sabanium.me/post/monad/</guid>
      <description>この記事はThe Road to Monadsを意訳したものであり、RICORA Advent Calendarの11日目の記事です。
   Monad  今までの流れを振り返ると、Functorは何らかの値のWrapperであり、fmapによってその要素に関数適用ができた。 Applicative Functorはそれをさらに発展させて、関数自体をFunctorで包むことによって、複数の引数を取る関数を実装できるようにしていたのだった。
さて、何が足りないのだろう？ 実は、Applicative Functorだけでは関数を複数組み合わせることが難しい。 例えば、f :: a -&amp;gt; bとg :: b -&amp;gt; cがあったときに、Applicative Functorだとa -&amp;gt; f b、b -&amp;gt; f cに写すことはできてもa -&amp;gt; f cに写すことができない。 こういう関数の使い方をする機会は割と多い気がするし、こんな感じで書きたくない？という話。
簡単にいえば、MonadはFunctorの中での関数合成を可能にする構造。 しかし、これだけだとMonadが実際に何をするかいまいちわからないので以下に書いていく。 導入として、大体FunctorみたいなものだとしてMonadmを使うことにしよう(とはいっても、実装上は拡張したApplicative型なんだからFunctorの拡張として捉えるほうが適切かもしれない）。
じつはMonadは他の必要っぽいことも包摂してくれている。
 Monad上の関数の繰り返し適用に対して、Monadを圧縮する。a -&amp;gt; m bに対してまたfmapをつかってmを適用すると、m a -&amp;gt; m (m -&amp;gt; b)になってしまう。 例えば、a -&amp;gt; Maybe bならMaybe a -&amp;gt; Maybe ( Maybe b )的な。 これを圧縮して、繰り返し適用してもa -&amp;gt; Maybe bの型を作れるようにする。 さっきの例。 a -&amp;gt; m bとb -&amp;gt; m cからa -&amp;gt; m cの関数を作りだせる。 逆にm aが与えられたとき、a -&amp;gt; m bの関数を使えるようにする。     型の圧縮  まあこれだけだとよくわからないので、具体例を考えよう。 1 / sqrt (x)をMaybeを返すとして考える。 この関数を二つの関数1 / xとsqrt(x)の合成で考えるとすると、例えば1/0はundefinedなので、1 / xでx = 0ならNothingを返したい。 これはsqrt(x)でも一緒。x &amp;lt; 0ならNothingを返したい。 そこで、これらを実際に書いてみるとこんな感じ。</description>
    </item>
    
    <item>
      <title>The Road to Monads: Functorについて</title>
      <link>https://miso.sabanium.me/post/functor/</link>
      <pubDate>Sat, 04 Dec 2021 22:45:30 +0900</pubDate>
      
      <guid>https://miso.sabanium.me/post/functor/</guid>
      <description>この記事はThe Road to Monadsを意訳したものです。 あんまり難しいことは言っていないと思うんだけど、あまり頭に入らなかったので簡単に翻訳してみた。
   Functor     fmap  Functorって何? 内部の値にアクセスできるようにしたWrapper。具体例: IO、Maybeなど。 圏論でいうところの関手。
コードでの具体例：
addMaybe :: Num a =&amp;gt; Maybe a -&amp;gt; Maybe a -&amp;gt; Maybe a addMaybe (Just a) (Just b) = Just (a + b) addMaybe _ _ = Nothing 確かに内部の値にアクセスしている。まあこれは恣意的な関数だけど。 ただし、これを一般化するといい感じになってくれる。 要は内部の値にアクセスすることが重要で、例えばf :: Int -&amp;gt; Intはこういう関数を使うことでMaybe Intにも使えるようになったりする。
次に、こんな関数を考える。
fmapList :: (a -&amp;gt; b) -&amp;gt; ([a] -&amp;gt; [b]) fmapList f [] = [] fmapList f (x:xs) = f x : fmapList f xs これはmap関数と変わらない。 ある関数をリストのすべての要素に適用するだけだ。</description>
    </item>
    
  </channel>
</rss>
