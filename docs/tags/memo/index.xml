<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>memo on 鯖の味噌煮がおいしく炊けない</title>
    <link>https://miso.sabanium.me/tags/memo/</link>
    <description>Recent content in memo on 鯖の味噌煮がおいしく炊けない</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-JP</language>
    <lastBuildDate>Mon, 17 Jan 2022 02:13:58 +0900</lastBuildDate><atom:link href="https://miso.sabanium.me/tags/memo/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Pandoc</title>
      <link>https://miso.sabanium.me/post/pandoc/</link>
      <pubDate>Mon, 17 Jan 2022 02:13:58 +0900</pubDate>
      
      <guid>https://miso.sabanium.me/post/pandoc/</guid>
      <description>公式reference
Pandocってなんだよ→マークダウンをいい感じにhtml/tex/pdf等にしてくれる便利なライブラリ
    出力形式  -o で出力指定　-sで分割されていない状態として出力
pdfはtexをかんでしまう(=日本語が使えない)ので、lualatexを使わざるを得ない。 指定の仕方としては例えば
--pdf-engine=lualatex とする。
フォント指定は-Vとか。 luaではluatexjapresetoptionsみたいなのが使える上に、フォントもちゃんと指定できる（俺にはIPA、お前しかいないんだ&amp;hellip;)
   美しくする  -N: セクションというか章の前に数字をつける。</description>
    </item>
    
    <item>
      <title>CISCO 操作メモ</title>
      <link>https://miso.sabanium.me/post/cisco/</link>
      <pubDate>Sun, 16 Jan 2022 17:10:15 +0900</pubDate>
      
      <guid>https://miso.sabanium.me/post/cisco/</guid>
      <description>操作方法チートシート     スイッチ系  特権モードに切り替え
enable 現在のconfig
show running-config / show run copy current configuration file to the startup configuration file
copy running-config startup-config terminal configuration
configure terminal / config t    configuration  line console config
console line (num) line console password
password (password) login enable password
enable password (passwd) enable secret
enable secret (passwd) encryption
service password-encryption message of the day</description>
    </item>
    
    <item>
      <title>存在と時間メモ</title>
      <link>https://miso.sabanium.me/post/ex_and_time/</link>
      <pubDate>Sat, 15 Jan 2022 17:06:56 +0900</pubDate>
      
      <guid>https://miso.sabanium.me/post/ex_and_time/</guid>
      <description>底本は光文社古典新訳文庫「存在と時間」（訳：中山元）。
   001  存在は問われていない（＝自明なものとみなされている）。 存在の意味を解釈することで、時間を通じて存在了解（＝？）を可能にする。
   002  略
   序論     第一章 第一節     003  存在は忘れられた。
   004  存在は、もっとも普遍的で空虚な概念（＝議論のうちのプリミティブな概念)であるとされ、自明なものとされた。
   005  存在が自明であるとの先入観を抱かせた先入観は、古代の存在論を起源としている。 その検討のために、存在についての問いとその答えを明らかにしなければならない。 そのためにここで検討する先入観は3つある。
   006 1. 存在の概念の普遍性  存在はもっとも普遍的であるとされる。 しかし、存在の普遍性は類(カテゴリーのこと)の普遍性ではない(これはアリストテレス？的な分類における種と類における類)。 存在者（存在するもの？）が類と種によって構造化されるなら、存在は類になることができない（すなわち、述語になれない）。 存在は「超越概念」である。 なんらかの事柄は、その一番の抽象化で多様な類によって記述されるが、存在はそれを超越してあらゆる物事をその射程に収めてしまう。 そこで、その存在の性質について「類比による統一」と名をつけた。 つまり、存在が普遍的であることは自明ではないし、あらゆる事物に対して適用可能なのも自明ではない。
   007 2. 存在の定義不能性について  存在を定義することはできない。 それは(アリストテレスに従うならば)最も近い種との類差によって定義することができないということでもあり、何らかの存在者によって、もしくは上位下位の概念から定義できないということでもある。 ただし、これは「存在」が存在者のようなものではない、という事実と、定義を用いて存在を形作るということができないということを示唆するだけに過ぎない。
   008 3.</description>
    </item>
    
    <item>
      <title>四方対象読書メモ</title>
      <link>https://miso.sabanium.me/post/quadraple/</link>
      <pubDate>Sat, 08 Jan 2022 17:44:20 +0900</pubDate>
      
      <guid>https://miso.sabanium.me/post/quadraple/</guid>
      <description>オブジェクト指向存在論ってなんだよ。
   1章  「対象」とはなに？素朴な観点からはもののこと。トマトは対象。アンパンマンも実在はしていないが対象。実在・非実在、物理的・非物理的にかかわらずそう認識されていれば対象。
その「対象」に対していままで取られてきたアプローチには3つの方法があると指摘。
 解体  　いろいろなもの（例：ろうそくの火）とかはあるけど、より基本的な要素に還元可能だよね、という主張。 古くはタレスの水とか。 そこから派生して、統一されたもの（アペイロン）から分割されたり、分割されたものがあらゆるものに進化しうる可能性を持つなどの考えもこれに当てはまる。
　批判は難しそうだったので追記。
埋却  　ものはより大きな性質の一部だよね、という主張。 経験論では、りんごを「赤」などの何らかの性質を寄せ集めた性質の束であり（有限か無限かは議論されていないが、まあとりあえず有限ということにしておかないと面倒くさいのでそうする）、習慣的に経験する性質の集合のニックネームであるとする。
　対象が経験の中にないなら、経験の外について考えればいいのだが、その対象の実在を仮定することはできない（当たり前だが）。 そこで、経験の外の世界を否定する立場と、対象が経験自体である（＝世界、あるいは事物との相関にしかアクセスできない）という立場が現れる。 後者を相関主義という。 さらに、相関主義を推し進めて、人間と世界が特別なのではなく、事物の性質は事物と事物の関係によって基礎付けられるとの考えもある。 これは関係主義である。
　これらはいずれも対象をより大きなもの（性質、相関、関係）の中にまとめ上げることである。 これの批判はなんか難しそうだったので追記。
解体して埋却  　いや唯物論を推し進めた先の事物の性質は語れるんじゃね？という主張。 たし🦀。 個別の対象ではなく、原子についての性質は述べられたりするよね、ということであらゆる対象は原子にまで分割可能だけど原子自体の性質を語ることはできるから、解体して埋却している。 :thinking_face:になるけど、結局は経験が必要になる以上、存在に対していらんもん加えてるから今度は経験の実在を検証する必要があるよね。 逆に経験のみから対象を議論するためには外部のもの（神とか亡霊とか）が必要になるからこっちも論点をすり替えているだけであんまり意味がない。
対象  　じゃあ何を議論すればいいんだ、というところで対象が出てくる。 ソクラテスは「メノン」で執拗に徳について問うていたが（ちょっとキモいレベルで）、その徳の実在については全く触れなかった。 彼（あるいは彼女）が触れていたのは徳の性質のみであって、それは対象が性質よりもより深い層にあるということである。 例としては、りんごを食べるときに我々が感じるのはりんごの果肉の食感と甘さとかすかな酸っぱさであり、視覚的な赤さではあるが、これで本当にりんごを食べているかというとそうではない。 りんごの性質に操作を加えたかもしれないが、それは対象とするりんご本体にアクセスしている訳ではないということ（例が下手くそ）。
　対象についてはこんな感じ。むずいっす。</description>
    </item>
    
    <item>
      <title>Rust覚え書き</title>
      <link>https://miso.sabanium.me/post/rust/</link>
      <pubDate>Thu, 23 Dec 2021 16:42:30 +0900</pubDate>
      
      <guid>https://miso.sabanium.me/post/rust/</guid>
      <description>First, you&amp;rsquo;d better refer to Rust by Example for best solutions (of course, they&amp;rsquo;re the pro!).
   入出力  String型のbufへの入力
use std::io::Read; fn main() { let mut buf = String::new(); std::io::stdin().read_to_string(&amp;amp;mut buf).unwrap(); } i64型の配列への入力
let mut iter = buf.split(&amp;quot;\n&amp;quot;); let v1:Vec&amp;lt;i64&amp;gt; = iter.next().unwrap().split_whitespace().map(|x| x.parse::&amp;lt;i64&amp;gt;().unwrap()).collect(); もしくは可読性を上げて
let mut iter = buf.split(&amp;quot;\n&amp;quot;); let v1:Vec&amp;lt;i64&amp;gt; = iter.next().unwrap().split_whitespace().map(|x| { x.parse::&amp;lt;i64&amp;gt;().unwrap() }).collect();    配列  VectorでもArrayでもいい。Collect()するとVec&amp;lt;T&amp;gt;になる。
Arrayの初期化
分かっている状態での初期化 let arr: [T; num of elements] = [直書き] 繰り返したいとき let arr: [T; num of elements] = [elem; num of elements]    debug  type check</description>
    </item>
    
    <item>
      <title>i3wmをubuntuで導入し、いい感じにする</title>
      <link>https://miso.sabanium.me/post/i3/</link>
      <pubDate>Tue, 21 Dec 2021 00:16:14 +0900</pubDate>
      
      <guid>https://miso.sabanium.me/post/i3/</guid>
      <description>これはRICORA言語班 Advent Calendarの18日目の記事です。新入生相手におままごとをしていたら完全に書くのを忘れていたので、適当なことを書きます。すみません。
   背景  windows10をサクサク動かせないPCを普段使いするためにはどうすればいいのだろうか？という問題が与えられたとき、大体ubuntuとかlinux mintみたいな軽量ディストロがおすすめされると思うのですが、あえてウィンドウマネージャーの方から攻めてみたいと思ったので書きます。
   導入とか  dotfileとかどうせ上げてるんだろ？ → はい。これです。見たければ見てもいいよ。
i3はフリーソースのタイル型ウィンドウマネージャです。 タイル型ウィンドウマネージャは、画面上のアプリケーションを画面を埋めるように配置します。
個人的に感じるi3のメリットは、カーソルを動かす必要がない（＝キーボード上で操作が完結する）ことと、バッテリーの持ちが非常に良くなることです。 もちろんacpiで充電の上限は設けていますが、大体70%充電しておけば６時間程度は使えるはずです。 さらに、fehなどを用いることで背景を設定することもでき、i3barやi3statusを調整することで、天気やバッテリー情報などを常時表示することもできます。
   導入方法  i3は文献があまりになさすぎるので、いつものarch wikiに全面的に頼ることになります。 私も全面的に頼りました。
archで入れているわけではないので、ubuntuを使いつつ入れる方法を説明します。
公式でおすすめされているのは、配布されているtarballを用いる方法ですが、aptでも拾ってこれます。
sudo apt install i3 i3-wm このくらいで十分だった気がする。 足りなくなったら都度足してください。
i3をインストールすると、ログイン画面の右下に歯車マークが出て、ログイン後のウィンドウマネージャが選べるようになります。 これでi3を選択してログインすれば、無事にインストール完了です。
   操作  i3はまあまあ独特な動きをします（vimよりは習得コストが低いかもしれない）。 キーマップの完全版はDefault Keybindingsを参照してください。
i3を使う際にはmodと呼ばれる特殊キーを設定する必要があります。 私はaltキーに設定して使っていますが、このmodキーと何らかのキーを同時に押すことで画面の操作を行います。
例えば、mod + 1なら1番目のウィンドウに移動します。 また、mod + shift + 1なら現在のウィンドウを1番目のウィンドウに移動させます。 意味がわかりませんね。手を動かさないと理解できないので自分で頑張ってi3を使ってみてください。
   i3  i3の設定ファイルは、ルート直下の.config/i3/configになります。 デフォルトでは生成されていなかったと思うので、そのようなファイルを新しく作って設定してあげると勝手にファイルを見に行ってくれます。 確か開発レポジトリをクローンしてきてブランチをcheckoutするとデフォの設定が入っているconfigがあるはずです。 おそらく初見で利用する際にはそれをコピー・コピーアンドペーストするといいと思います。</description>
    </item>
    
  </channel>
</rss>
