<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>memo on 鯖の味噌煮がおいしく炊けない</title>
    <link>https://miso.sabanium.me/tags/memo/</link>
    <description>Recent content in memo on 鯖の味噌煮がおいしく炊けない</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-JP</language>
    <lastBuildDate>Wed, 21 Dec 2022 00:00:00 +0900</lastBuildDate><atom:link href="https://miso.sabanium.me/tags/memo/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>OAuth2.0のまとめ</title>
      <link>https://miso.sabanium.me/post/oauth2/</link>
      <pubDate>Wed, 21 Dec 2022 00:00:00 +0900</pubDate>
      
      <guid>https://miso.sabanium.me/post/oauth2/</guid>
      <description>これはRICORA言語班 Advent Calendarの24日目の記事です。
背景 アルバイトで調べることになったため。
OAuth2.0に至る背景 HTTPはドキュメントの送受信とAPIへのアクセスを兼ねるが、ステートレスなのでAPIへの認証を提供していない。そこで、APIへの認証を適切に提供することで、クライアントが正しい権限でリソースにアクセスできるようにする機構が必要。そこで、リソースへのアクセスに対してアクセストークンを発行するという方式をとる。そのために、OAuthはトークンの取得方法と使用方法を定義する。
構成と前提 前提として、リソースの所有者（人類であってもよい）が、クライアントアプリに、認証が必要なリソースへのアクセスをさせたいとする。例えば、メールアドレスを付与されている個人がメールボックスに入っているメールを確認するためにクライアントアプリを通じてメールボックスのデータにアクセスしたい場合など。POP3でもIMAPでもいいが、基本的に人類は毎日温かみのあるcURLを書くわけではなく、サンダーバードちゃんなどにそこらへんを全部任せているので、クライアントを想定するのは必須である。
構成は以下の通り。
// 構成 Tokenの発行 認証が必要なリソースへのアクセスを考えると、とりあえずは以下のような手順を取ることになる。
リソース所有者がクライアントに認証が必要なリソースへのアクセスを指示する クライアントは認可サーバーに問い合わせて、リソース所有者にクライアントを認可してもらう 所有者に認可されたクライアントは認可サーバーにトークンを発行してもらう クライアントはトークンをリソースに提示する では認可のための、認可コードによる付与形式という機構を考えよう。クライアントアプリ側でリソース所有者による認可が必要だと判断したとき、以下のようなことが行われる。
クライアントは所有者を認可サーバーの認可エンドポイントへリダイレクトする。ステータスコードは302とか。その他に、ヘッダーにスコープを埋め込むことでトークンの権限範囲を指定する。 所有者は認可サーバーでクライアントの権限などを認識した上でクライアントを認可する。 認可サーバーは所有者をクライアントへ認可コードと共に送る。これはURIにcode=???として埋め込まれる クライアントは認可コードと自身の認証情報を認可サーバーに送る。認可サーバーは認可コードが3.で発行されたものであることを検証し、問題がなければトークンを発行する。 クライアントはトークンを得て、リソースにアクセスする。 なんらかのサービスのAPIを利用しようとした時にBearer Tokenがなんちゃら&amp;hellip;と言われると思うが、そのBearer Tokenはこのアクセストークンである。
// ず もちろんトークンには有効期限があるので、トークンを新たにリクエストするためのリフレッシュトークンというものも存在する。リフレッシュトークンの仕組みは単純であり、
認可サーバーにリフレッシュトークンと古いアクセストークンを送る 新しいアクセストークンが返送される という形でアクセストークンを新しくすることができる。
OAuthは認証ではない 要追記
セキュリティ 要追記
実装とか 要追記
参考文献 https://www.rfc-editor.org/rfc/rfc6749 </description>
    </item>
    
    <item>
      <title>ふりかえり2022</title>
      <link>https://miso.sabanium.me/post/throwback2022/</link>
      <pubDate>Mon, 19 Dec 2022 00:16:14 +0900</pubDate>
      
      <guid>https://miso.sabanium.me/post/throwback2022/</guid>
      <description>これはRICORA言語班 Advent Calendarの22日目の記事です。
昨日はKakudoさんのRustでもグローバル変数でした。普通にwebサイトがかっこよくてすごい。前日に題材変えてすみません。OAuthに関しては将来の自分に頼みました。書くことがなさすぎる。
ふりかえり 2022年はハッカソンなどに出たり出なかったりバイトに行ったり行かなかったりレポートを出したり出さなかったりしていた。あとは真人間なのでツイッターをやめた。
経験知：やったほうがいいことまとめ 俺は〇〇できます・〇〇できませんと叫んだほうがいい
基本的に人間は未来予測が正確にできないため、だいたいできる！！！！！といってできないことが多い（3敗）ので見極めが大事 打ち返す速度を上げる
納期がまあまあ遠くてもちゃんと仕事をしないと前日になる ちゃんと仕事をするという信頼を得ることがかなり大事だと思う 課題とかでまあまあ疲れると手慣れたプログラムしか書けない つまりある程度認知的にバッファを持って色々やったほうがよい slackではメンションをつける 要件を詰める
めんどいが詰めないともっとめんどいことになりがち 学生同士でなんかすると雰囲気でなんかやりがちだけど割と個人タスクがわからなくなるので（人間も）詰めたほうがいい 他人に対して期待しない
あなたにも色々タスクがあるように皆も色々タスクがある 適度に発話する
話さないと存在が認知されない 話しすぎるとコミュニケーションではない 話している内容に意味がなくとも人間ごっこの練習だと思って聞くと良い 寝る
夜は寝たほうがいい。寝ないと体力が欠乏して社会か学業か労働のどれかがめちゃくちゃになる。ぼくのばあいしゃかいはそんざいしていませんでした。かなしいね。 人生について考えない
はい。 恋愛・結婚・老後が概ね幼年期の刷り込みとしてあるので、30くらいで死ぬと想定してそれらを滅却する 今年の失敗シリーズ 失敗談１：3週間のハッカソンのプロダクトを前日に作ることになった
対処法
メンバーがGithubを知っているか・ユーザーアカウント・コミット数がある程度あることなどを確認する ビジネスサイドをかじった人間には強制的にタスクを振ったりリーダーをやらせたりしてそれっぽく振る舞わせて、手持ち無沙汰にさせない タスクをあげないと動けない人にはスキルセットなどをちゃんと共有してもらい、自分が話している内容を理解しているか確認する タイムスケジュールを管理する人をちゃんと選定しておく（人格で） 失敗談２：「〇〇くん知ってる？あ、知らないか」という音声を聞き取ってしまう
対処法
記憶に残ると苦しいので、酒とかでいい感じに鈍麻になったほうがいい 学部での社会生活はないですけどそれ以外ではあって正常な人間ですよ！というアピールをできる感じの言葉で打ち返したほうがいい 同人音声で上書きする（Project E.L.Cさんとアクア・アルタさん、ありがとうございます） 失敗談3：家から出られない日が発生する
対処法
家から出ない 大学のことを忘れて14時間くらい寝る。その後飯を食う。また寝るを繰り返す 大学に行く場合はノイキャンイヤホンで音楽を聞き、周囲から切断される 失敗談4:　ノイキャンイヤホンを２つ紛失する
対処法
買わないと大学で苦しいので買う 買わない 多分また買います あとは正常に人間とのコミュニケーションが取れませんx10とか書類選考落ちましたx4とかです。俺ってどうしたらいいですか。</description>
    </item>
    
    <item>
      <title>RaspberryPiからの動画配信について</title>
      <link>https://miso.sabanium.me/post/rpi-video/</link>
      <pubDate>Fri, 02 Dec 2022 00:00:00 +0900</pubDate>
      
      <guid>https://miso.sabanium.me/post/rpi-video/</guid>
      <description>これはRICORA言語班 Advent Calendarの8日目の記事です。
背景 研究に使う可能性があるのでメモとして載せておく。ローカルネットワークでの利用をまず考えている。
結論 ffmpegを使おう。
ffmpegは公式でA complete, cross-platform solution to record, convert and stream audio and video.と名乗っているわけなので、もちろんstreamもできるわけである。
構成はこんなかんじ。あまりにも図の出来が良すぎて失神している。
+--------+ | camera | +--------+ | USB +--------+ +--------+ | rspi | [wifi IEEE 802.11/?] --- *LAN* --- [wifi / ethernet] | debian | +--------+ +--------+ 現在使っているのはデスクトップつきRaspibianであり、他の人があいまいにドライバを入れた可能性もあるが、カメラは一発で認識できていて、/dev/video0にある(もちろん、時と共に移ろいゆく)。動作確認はVLCとかで画面に映し、挙動を監視するとできる。
さて、いまRaspiberry Piで見えている画面をいい感じに同一LANの中にいるクライアントに送りたいとする。まず検討すべきことは
ffmpegのオプション 配信におけるIPプロトコル（TCP / UDP どっち？） の二点だと考えられる。もちろんffmpeg以外のツールもあるが、いまはffmpegの話をしているので多分これでよい。
RaspberryPiでやるべきこと まず、オプションがありすぎるので適当に先人のログなどを拝見させてもらおう。ありがとうございます！1つ目に関しては、特に無自覚にraspividが使えるかのように書かれているものの、raspividが使えるのは専用のカメラモジュールに限定されているようなので、注意が必要。
そのうえで、オプションを考えよう。マニュアルが長いが、まあ-iがインプットでレート操作・動画サイズの変更などができることがわかればよい。とりあえずピクセルレートとかは最適にしてくれるっぽい（？）ので、適当なコーデックといい感じの-preset ultrafast、-tune zerolatencyを指定することにする。動画のフォーマットはmpegtsにして、一旦は配信用にする。録画すると.tsの拡張子のファイルが生成されるが、それをぶち込んで.mp4のファイルを作ればよいはずなので、あまり問題はないと思っている。
コーデックに関しては、h264よりもh265の方が後継規格なのでよいが、まだ広まっていない（？）可能性もあるらしい。とりあえずh265を採用して見えなかったらh264にスイッチするという運用でもこのスケールなら問題ないように思える。付記しておくが、h266も策定されたようなので、数年のうちにはそちらへの移行が始まる可能性が高い。
パケットサイズについてはネットワーク依存なのでよくわからないという感想が強いので、一旦は指定していないが、今後指定する可能性はある。例えばTCPはPMTUDを利用してパケットサイズを決めている。1300byteとか1000byteとかに指定するのが妥当かもしれない。
で、これらを鑑みると
ffmpeg \ -i /dev/video0 \ -vcodec libx265 \ -preset ultrafast \ -tune zerolatency \ -f mpegts \ udp://[client ip addr]:[port]&amp;amp;pkt_size=(.</description>
    </item>
    
    <item>
      <title>中動態の世界 メモ</title>
      <link>https://miso.sabanium.me/post/midvoice/</link>
      <pubDate>Fri, 04 Feb 2022 15:12:08 +0900</pubDate>
      
      <guid>https://miso.sabanium.me/post/midvoice/</guid>
      <description>先に中動態とは何かということをざっくりと記しておく。以下はwikipediaからぱちってきたやつ。
[200~中動態（ちゅうどうたい、ラテン語: [genus] medium、英語: middle [voice]）は、インド・ヨーロッパ語族の態のひとつ。能動態とは人称語尾によって区別される。中動態と受動態は形態の上で区別されないことが多い。中動態がよく残っている言語にサンスクリット、古代ギリシア語、アナトリア語派などがある。
現代では能動対受動であることに対して、昔は能動対中動であったという感じの話らしい。 それを念頭に置きつつ。
プロローグ 依存症患者のケア施設の人（多分）との会話。 「回復するとは回復することである」、という一般の意味体系とは違った意味の話。 薬物をやらないという強い意志を抱くことではなく、ただ回復という態度に回復を任せるようなもの（？）。
『ただ回復するというプロセスがあるんだ、と』 言語が消滅する前に、p21より
第一章 私が為すということに、意志は関わっているのか？という問題。
意志 := 物事を意識しつつ働きを為す力、である。 夢遊病患者は意識がないから意志をしない / がない。 でも意志はあたかも意識から自由になっているかのように語られている。 そこに矛盾がある。 さらに、意志があればその選択に責任が生ずる。 でも自由であって自由でないのに？
スピノザは行為の原因が意識されず、ただそれが意志であると錯覚しているという。 そこで自由意志は自由に意志をもって行為を企図するということではなく、強制された行為を自由な意志で行ったと解釈するということ。
例：私は歩いている。 歩いているという選択をしたのは私だが、歩くことの一挙一動を意志としてもって歩いているのか？No. 私は歩くということを思ってはいるかもしれないが、実際に訪れるのは私の体が歩行をするという状態である。 私は歩くから私の体が歩行をする、という表現の引き算をするとそこには意志があることになる。 もしくは、構文自体に意志が宿っているとも言えるかもしれない。
それを能動態vs中動態という区分で考える。
第二章 中動態の起源を考えていく。
アリストテレスとかを参照しつつ、まずは中動態が受動態より先にあったことがわかる。 次に文法書の標準となった「テクネー」の読解における能動と受動というテーマが読解において反復され続けてきたといっている。
第三章 そこで、バンヴェニストを参照して能動ー受動が「為す」、「為される」の関係にあるのに対して能動ー中動が「過程の外にある」、「過程の中にある」という関係であることがわかった。 他に「在る」、「生きる」ということが能動態であることも書かれているがつながりがよくわからない。 最後に、アーレントの古代ギリシアでは意志という観念がなかったのではないか、というところで終わる。
第四章 デリダのバンヴェニスト批判の話だけど、バンヴェニストが概ね言っていることは言語には思考の可能性を制約する作用があり、哲学は中道体の抑制の上に発展してきた、ということ。 ここらへんの話はスノウ・クラッシュの中のシュメール人の話っぽくて面白い。</description>
    </item>
    
    <item>
      <title>Ctags</title>
      <link>https://miso.sabanium.me/post/ctags/</link>
      <pubDate>Tue, 01 Feb 2022 13:39:55 +0900</pubDate>
      
      <guid>https://miso.sabanium.me/post/ctags/</guid>
      <description>vimと相性がいいctagsを使いたい。
インストール universal ctagsをう。
なんかsnapでしか提供されていないけどあんま好きじゃないので、ソースからビルドする。 最後のmakeのところだけsudo make installじゃないと\usr\local\binにアクセスできないので特権を与える。</description>
    </item>
    
    <item>
      <title>Pandoc</title>
      <link>https://miso.sabanium.me/post/pandoc/</link>
      <pubDate>Mon, 17 Jan 2022 02:13:58 +0900</pubDate>
      
      <guid>https://miso.sabanium.me/post/pandoc/</guid>
      <description>公式reference
Pandocってなんだよ→マークダウンをいい感じにhtml/tex/pdf等にしてくれる便利なライブラリ
出力形式 -o で出力指定　-sで分割されていない状態として出力
pdfはtexをかんでしまう(=日本語が使えない)ので、lualatexを使わざるを得ない。 指定の仕方としては例えば
--pdf-engine=lualatex とする。
フォント指定は-Vとか。 luaではluatexjapresetoptionsみたいなのが使える上に、フォントもちゃんと指定できる（俺にはIPA、お前しかいないんだ&amp;hellip;)
美しくする -N: セクションというか章の前に数字をつける。</description>
    </item>
    
    <item>
      <title>CISCO 操作メモ</title>
      <link>https://miso.sabanium.me/post/cisco/</link>
      <pubDate>Sun, 16 Jan 2022 17:10:15 +0900</pubDate>
      
      <guid>https://miso.sabanium.me/post/cisco/</guid>
      <description>操作方法チートシート スイッチ系 特権モードに切り替え
enable 現在のconfig
show running-config / show run copy current configuration file to the startup configuration file
copy running-config startup-config terminal configuration
configure terminal / config t configuration line console config
console line (num) line console password
password (password) login enable password
enable password (passwd) enable secret
enable secret (passwd) encryption
service password-encryption message of the day
banner motd &amp;#34;message&amp;#34; interface (vlan)
interface vlan (num) 複数個の場合
interface range (connector) up</description>
    </item>
    
    <item>
      <title>存在と時間メモ</title>
      <link>https://miso.sabanium.me/post/ex_and_time/</link>
      <pubDate>Sat, 15 Jan 2022 17:06:56 +0900</pubDate>
      
      <guid>https://miso.sabanium.me/post/ex_and_time/</guid>
      <description>底本は光文社古典新訳文庫「存在と時間」（訳：中山元）。
001 存在は問われていない（＝自明なものとみなされている）。 存在の意味を解釈することで、時間を通じて存在了解（＝？）を可能にする。
002 略
序論 第一章 第一節 003 存在は忘れられた。
004 存在は、もっとも普遍的で空虚な概念（＝議論のうちのプリミティブな概念)であるとされ、自明なものとされた。
005 存在が自明であるとの先入観を抱かせた先入観は、古代の存在論を起源としている。 その検討のために、存在についての問いとその答えを明らかにしなければならない。 そのためにここで検討する先入観は3つある。
006 1. 存在の概念の普遍性 存在はもっとも普遍的であるとされる。 しかし、存在の普遍性は類(カテゴリーのこと)の普遍性ではない(これはアリストテレス？的な分類における種と類における類)。 存在者（存在するもの？）が類と種によって構造化されるなら、存在は類になることができない（すなわち、述語になれない）。 存在は「超越概念」である。 なんらかの事柄は、その一番の抽象化で多様な類によって記述されるが、存在はそれを超越してあらゆる物事をその射程に収めてしまう。 そこで、その存在の性質について「類比による統一」と名をつけた。 つまり、存在が普遍的であることは自明ではないし、あらゆる事物に対して適用可能なのも自明ではない。
007 2. 存在の定義不能性について 存在を定義することはできない。 それは(アリストテレスに従うならば)最も近い種との類差によって定義することができないということでもあり、何らかの存在者によって、もしくは上位下位の概念から定義できないということでもある。 ただし、これは「存在」が存在者のようなものではない、という事実と、定義を用いて存在を形作るということができないということを示唆するだけに過ぎない。
008 3. 存在の自明性について 存在は自明であるとされており、実際になにかがあるというときにはその存在を暗黙裡に仮定している。 つまり、私達はすでに存在の存在了解(!!)の中で生きているのである。
009 しかし、そのような自明なものを解き明かすのが哲学者の仕事である(大いに同意)。
010 存在への問いは答えの前に、問いがすでに方向性にかけているため、問題設定を十分に展開する必要がある。
第二節 011 問いの性格をまず示すことで、存在についての問いが特別な意味を持つことを示す。
012 問うとは何か。 問うということは、探し求めることであるが、探し求められているものからすでに何らかの指針があるような中でそれを行うことでもある。 つまり、探し求められるものについての問いになるので、「〜について」問われているもの(ゲフラーテス)と「〜に」問いかけられているもの(ベフクラーテス)が存在する。 さらに、その「〜について」問われているものの中に問いただされているもの(エアフラークテス)が存在し、それが求められたときに問いはその目標(＝問に答える）を達したことになる。
013 では以上を用いて、存在の問いを設定しよう。
014 問うこと＝探し求めることなので、何らかの形で身近に解決の糸口がないといけない。 まず、「存在とは何であるか」という問いについて考えることで、すでにあるという存在了解がそこにあるといえる。
015 でも存在了解はどのように存在了解があるのかわからないために、いま使うことはできない。
016 ただし、存在了解があるということはなんらかの後ろ盾があるっぽい、ということになる。 その後ろ盾については、まだ何もわからない。
017 013に依拠すれば、「問われているもの」＝ゲフラーテスは＜存在＞である。 ＜存在＞は、存在者をそれとして規定し、存在者をどのように説明しようともその都度すでに＜土台となる所＞の存在として理解されているもの（？？？）。
存在者の存在は、それ自体が存在者であるわけではない（＝循環的定義の否定）。 よって、＜存在＞は存在者とは違う形で提示されねばならない。
「問いただされているもの」＝エアフラークテスは存在の意味である。 これもまた、存在者の意味＝意義とは異なった性格を持つ。
018 いま、存在者は＜存在＞（通常の意味とは異なる、対象としての存在としてこのように強調しておく）なので、問いかけられているものはもちろんその存在者自身である。 存在者の存在について性格を明らかにさせるためには、存在者の存在どおりの姿で近づく必要がある（＝「問いかけられているもの」への適切な近づき方の確立）。</description>
    </item>
    
    <item>
      <title>四方対象読書メモ</title>
      <link>https://miso.sabanium.me/post/quadraple/</link>
      <pubDate>Sat, 08 Jan 2022 17:44:20 +0900</pubDate>
      
      <guid>https://miso.sabanium.me/post/quadraple/</guid>
      <description>オブジェクト指向存在論ってなんだよ。
1章 「対象」とはなに？素朴な観点からはもののこと。トマトは対象。アンパンマンも実在はしていないが対象。実在・非実在、物理的・非物理的にかかわらずそう認識されていれば対象。
その「対象」に対していままで取られてきたアプローチには3つの方法があると指摘。
解体 いろいろなもの（例：ろうそくの火）とかはあるけど、より基本的な要素に還元可能だよね、という主張。 古くはタレスの水とか。 そこから派生して、統一されたもの（アペイロン）から分割されたり、分割されたものがあらゆるものに進化しうる可能性を持つなどの考えもこれに当てはまる。
批判は難しそうだったので追記。
埋却 ものはより大きな性質の一部だよね、という主張。 経験論では、りんごを「赤」などの何らかの性質を寄せ集めた性質の束であり（有限か無限かは議論されていないが、まあとりあえず有限ということにしておかないと面倒くさいのでそうする）、習慣的に経験する性質の集合のニックネームであるとする。
対象が経験の中にないなら、経験の外について考えればいいのだが、その対象の実在を仮定することはできない（当たり前だが）。 そこで、経験の外の世界を否定する立場と、対象が経験自体である（＝世界、あるいは事物との相関にしかアクセスできない）という立場が現れる。 後者を相関主義という。 さらに、相関主義を推し進めて、人間と世界が特別なのではなく、事物の性質は事物と事物の関係によって基礎付けられるとの考えもある。 これは関係主義である。
これらはいずれも対象をより大きなもの（性質、相関、関係）の中にまとめ上げることである。 これの批判はなんか難しそうだったので追記。
解体して埋却 いや唯物論を推し進めた先の事物の性質は語れるんじゃね？という主張。 たし🦀。 個別の対象ではなく、原子についての性質は述べられたりするよね、ということであらゆる対象は原子にまで分割可能だけど原子自体の性質を語ることはできるから、解体して埋却している。 :thinking_face:になるけど、結局は経験が必要になる以上、存在に対していらんもん加えてるから今度は経験の実在を検証する必要があるよね。 逆に経験のみから対象を議論するためには外部のもの（神とか亡霊とか）が必要になるからこっちも論点をすり替えているだけであんまり意味がない。
対象 じゃあ何を議論すればいいんだ、というところで対象が出てくる。 ソクラテスは「メノン」で執拗に徳について問うていたが（ちょっとキモいレベルで）、その徳の実在については全く触れなかった。 彼（あるいは彼女）が触れていたのは徳の性質のみであって、それは対象が性質よりもより深い層にあるということである。 例としては、りんごを食べるときに我々が感じるのはりんごの果肉の食感と甘さとかすかな酸っぱさであり、視覚的な赤さではあるが、これで本当にりんごを食べているかというとそうではない。 りんごの性質に操作を加えたかもしれないが、それは対象とするりんご本体にアクセスしている訳ではないということ（例が下手くそ）。
対象についてはこんな感じ。むずいっす。</description>
    </item>
    
    <item>
      <title>Rust覚え書き</title>
      <link>https://miso.sabanium.me/post/rust/</link>
      <pubDate>Thu, 23 Dec 2021 16:42:30 +0900</pubDate>
      
      <guid>https://miso.sabanium.me/post/rust/</guid>
      <description>First, you&amp;rsquo;d better refer to Rust by Example for best solutions (of course, they&amp;rsquo;re the pro!).
入出力 String型のbufへの入力
use std::io::Read; fn main() { let mut buf = String::new(); std::io::stdin().read_to_string(&amp;amp;mut buf).unwrap(); } i64型の配列への入力
let mut iter = buf.split(&amp;#34;\n&amp;#34;); let v1:Vec&amp;lt;i64&amp;gt; = iter.next().unwrap().split_whitespace().map(|x| x.parse::&amp;lt;i64&amp;gt;().unwrap()).collect(); もしくは可読性を上げて
let mut iter = buf.split(&amp;#34;\n&amp;#34;); let v1:Vec&amp;lt;i64&amp;gt; = iter.next().unwrap().split_whitespace().map(|x| { x.parse::&amp;lt;i64&amp;gt;().unwrap() }).collect(); 配列 VectorでもArrayでもいい。Collect()するとVec&amp;lt;T&amp;gt;になる。
Arrayの初期化
分かっている状態での初期化 let arr: [T; num of elements] = [直書き] 繰り返したいとき let arr: [T; num of elements] = [elem; num of elements] debug type check</description>
    </item>
    
    <item>
      <title>i3wmをubuntuで導入し、いい感じにする</title>
      <link>https://miso.sabanium.me/post/i3/</link>
      <pubDate>Tue, 21 Dec 2021 00:16:14 +0900</pubDate>
      
      <guid>https://miso.sabanium.me/post/i3/</guid>
      <description>これはRICORA言語班 Advent Calendarの18日目の記事です。新入生相手におままごとをしていたら完全に書くのを忘れていたので、適当なことを書きます。すみません。
背景 windows10をサクサク動かせないPCを普段使いするためにはどうすればいいのだろうか？という問題が与えられたとき、大体ubuntuとかlinux mintみたいな軽量ディストロがおすすめされると思うのですが、あえてウィンドウマネージャーの方から攻めてみたいと思ったので書きます。
導入とか dotfileとかどうせ上げてるんだろ？ → はい。これです。見たければ見てもいいよ。
i3はフリーソースのタイル型ウィンドウマネージャです。 タイル型ウィンドウマネージャは、画面上のアプリケーションを画面を埋めるように配置します。
個人的に感じるi3のメリットは、カーソルを動かす必要がない（＝キーボード上で操作が完結する）ことと、バッテリーの持ちが非常に良くなることです。 もちろんacpiで充電の上限は設けていますが、大体70%充電しておけば６時間程度は使えるはずです。 さらに、fehなどを用いることで背景を設定することもでき、i3barやi3statusを調整することで、天気やバッテリー情報などを常時表示することもできます。
導入方法 i3は文献があまりになさすぎるので、いつものarch wikiに全面的に頼ることになります。 私も全面的に頼りました。
archで入れているわけではないので、ubuntuを使いつつ入れる方法を説明します。
公式でおすすめされているのは、配布されているtarballを用いる方法ですが、aptでも拾ってこれます。
sudo apt install i3 i3-wm このくらいで十分だった気がする。 足りなくなったら都度足してください。
i3をインストールすると、ログイン画面の右下に歯車マークが出て、ログイン後のウィンドウマネージャが選べるようになります。 これでi3を選択してログインすれば、無事にインストール完了です。
操作 i3はまあまあ独特な動きをします（vimよりは習得コストが低いかもしれない）。 キーマップの完全版はDefault Keybindingsを参照してください。
i3を使う際にはmodと呼ばれる特殊キーを設定する必要があります。 私はaltキーに設定して使っていますが、このmodキーと何らかのキーを同時に押すことで画面の操作を行います。
例えば、mod + 1なら1番目のウィンドウに移動します。 また、mod + shift + 1なら現在のウィンドウを1番目のウィンドウに移動させます。 意味がわかりませんね。手を動かさないと理解できないので自分で頑張ってi3を使ってみてください。
i3 i3の設定ファイルは、ルート直下の.config/i3/configになります。 デフォルトでは生成されていなかったと思うので、そのようなファイルを新しく作って設定してあげると勝手にファイルを見に行ってくれます。 確か開発レポジトリをクローンしてきてブランチをcheckoutするとデフォの設定が入っているconfigがあるはずです。 おそらく初見で利用する際にはそれをコピー・コピーアンドペーストするといいと思います。
私が追記している設定は確かこんな感じです。
画面閉じたらスリープさせる(だった気がする) exec --no-startup-id xss-lock --transfer-sleep-lock -- i3lock --nofork 日本語入力用のibusを裏で起動 exec --no-startup-id ibus-daemon -x -d -r 背景の起動 exec --no-startup-id ~/.fehbg 明るさ exec --no-startup-id compton -cbm 0.</description>
    </item>
    
  </channel>
</rss>
