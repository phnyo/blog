<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>翻訳 on 鯖の味噌煮がおいしく炊けない</title>
    <link>https://miso.sabanium.me/tags/%E7%BF%BB%E8%A8%B3/</link>
    <description>Recent content in 翻訳 on 鯖の味噌煮がおいしく炊けない</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-JP</language>
    <lastBuildDate>Mon, 06 Dec 2021 11:20:40 +0900</lastBuildDate><atom:link href="https://miso.sabanium.me/tags/%E7%BF%BB%E8%A8%B3/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>The Road to Monads: Monadについて</title>
      <link>https://miso.sabanium.me/post/monad/</link>
      <pubDate>Mon, 06 Dec 2021 11:20:40 +0900</pubDate>
      
      <guid>https://miso.sabanium.me/post/monad/</guid>
      <description>この記事はThe Road to Monadsを意訳したものであり、RICORA Advent Calendarの11日目の記事です。
   Monad  今までの流れを振り返ると、Functorは何らかの値のWrapperであり、fmapによってその要素に関数適用ができた。 Applicative Functorはそれをさらに発展させて、関数自体をFunctorで包むことによって、複数の引数を取る関数を実装できるようにしていたのだった。
さて、何が足りないのだろう？ 実は、Applicative Functorだけでは関数を複数組み合わせることが難しい。 例えば、f :: a -&amp;gt; bとg :: b -&amp;gt; cがあったときに、Applicative Functorだとa -&amp;gt; f b、b -&amp;gt; f cに写すことはできてもa -&amp;gt; f cに写すことができない。 こういう関数の使い方をする機会は割と多い気がするし、こんな感じで書きたくない？という話。
簡単にいえば、MonadはFunctorの中での関数合成を可能にする構造。 しかし、これだけだとMonadが実際に何をするかいまいちわからないので以下に書いていく。 導入として、大体FunctorみたいなものだとしてMonadmを使うことにしよう。
じつはMonadは他の必要っぽいことも包摂してくれている。
 Monad上の関数の繰り返し適用に対して、Monadを圧縮する。a -&amp;gt; m bに対してまたfmapをつかってmを適用すると、m a -&amp;gt; m (m -&amp;gt; b)になってしまう。 例えば、a -&amp;gt; Maybe bならMaybe a -&amp;gt; Maybe ( Maybe b )的な。 これを圧縮して、繰り返し適用してもa -&amp;gt; Maybe bの型を作れるようにする。 さっきの例。 a -&amp;gt; m bとb -&amp;gt; m cからa -&amp;gt; m cの関数を作りだせる。 逆にm aが与えられたとき、a -&amp;gt; m bの関数を使えるようにする。     型の圧縮  まあこれだけだとよくわからないので、具体例を考えよう。 1 / sqrt (x)をMaybeを返すとして考える。 この関数を二つの関数1 / xとsqrt(x)の合成で考えるとすると、例えば1/0はundefinedなので、1 / xでx = 0ならNothingを返したい。 これはsqrt(x)でも一緒。x &amp;lt; 0ならNothingを返したい。 そこで、これらを実際に書いてみるとこんな感じ。</description>
    </item>
    
    <item>
      <title>The Road to Monads: Applicativeについて</title>
      <link>https://miso.sabanium.me/post/applicative/</link>
      <pubDate>Sun, 05 Dec 2021 11:22:10 +0900</pubDate>
      
      <guid>https://miso.sabanium.me/post/applicative/</guid>
      <description>この記事はThe Road to Monadsを意訳したものであり、RICORA Advent Calendarの9日目の記事です。
   Applicative Functor  FunctorはWrapperで、fmapを使えば(a -&amp;gt; b)-&amp;gt;(f a -&amp;gt; f b)という風にFunctorの要素に対して関数を適用できたのだった。 もちろん、これはカリー化されているので結局(a -&amp;gt; b) -&amp;gt; f a -&amp;gt; f bと同じことである。
でもこれだと問題があって、例えば
f :: Int -&amp;gt; Int -&amp;gt; Int f a b = a * b みたいな関数をMaybe Intで置き換えて使おうと思ったときに使えない。 というか単純に一変数関数にしか使えん。 これはけっこうだるい。
そこで、その代替策がApplicativeなのだがこれもこれとして理解し難い。 まずは関数定義から見てみよう。
class functor f =&amp;gt; Applicative f where pure :: a -&amp;gt; f a (&amp;lt;*&amp;gt;) :: f (a -&amp;gt; b) -&amp;gt; f a -&amp;gt; f b ここで()に囲まれているのは中置関数（ここでは演算子とよぶ）であることを思い出そう。 すると、まずpureはある型aからFunctor a型に移すようなものだとわかる。 pureはfunctorのデフォルトであるべき（らしい）なので、簡単な例だとMaybeに対して</description>
    </item>
    
    <item>
      <title>The Road to Monads: Functorについて</title>
      <link>https://miso.sabanium.me/post/functor/</link>
      <pubDate>Sat, 04 Dec 2021 22:45:30 +0900</pubDate>
      
      <guid>https://miso.sabanium.me/post/functor/</guid>
      <description>この記事はThe Road to Monadsを意訳したものです。 あんまり難しいことは言っていないと思うんだけど、あまり頭に入らなかったので簡単に翻訳してみた。
   Functor     fmap  Functorって何? 内部の値にアクセスできるようにしたWrapper。具体例: IO、Maybeなど。 圏論でいうところの関手。
コードでの具体例：
addMaybe :: Num a =&amp;gt; Maybe a -&amp;gt; Maybe a -&amp;gt; Maybe a addMaybe (Just a) (Just b) = Just (a + b) addMaybe _ _ = Nothing 確かに内部の値にアクセスしている。まあこれは恣意的な関数だけど。 ただし、これを一般化するといい感じになってくれる。 要は内部の値にアクセスすることが重要で、例えばf :: Int -&amp;gt; Intはこういう関数を使うことでMaybe Intにも使えるようになったりする。
次に、こんな関数を考える。
fmapList :: (a -&amp;gt; b) -&amp;gt; ([a] -&amp;gt; [b]) fmapList f [] = [] fmapList f (x:xs) = f x : fmapList f xs これはmap関数と変わらない。 ある関数をリストのすべての要素に適用するだけだ。</description>
    </item>
    
  </channel>
</rss>
