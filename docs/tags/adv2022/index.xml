<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Adv2022 on 鯖の味噌煮がおいしく炊けない</title>
    <link>https://miso.sabanium.me/tags/adv2022/</link>
    <description>Recent content in Adv2022 on 鯖の味噌煮がおいしく炊けない</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-JP</language>
    <lastBuildDate>Wed, 21 Dec 2022 00:00:00 +0900</lastBuildDate><atom:link href="https://miso.sabanium.me/tags/adv2022/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>OAuth2.0のまとめ</title>
      <link>https://miso.sabanium.me/post/oauth2/</link>
      <pubDate>Wed, 21 Dec 2022 00:00:00 +0900</pubDate>
      
      <guid>https://miso.sabanium.me/post/oauth2/</guid>
      <description>これはRICORA言語班 Advent Calendarの24日目の記事です。
背景 アルバイトで調べることになったため。
OAuth2.0に至る背景 HTTPはドキュメントの送受信とAPIへのアクセスを兼ねるが、ステートレスなのでAPIへの認証を提供していない。そこで、APIへの認証を適切に提供することで、クライアントが正しい権限でリソースにアクセスできるようにする機構が必要。そこで、リソースへのアクセスに対してアクセストークンを発行するという方式をとる。そのために、OAuthはトークンの取得方法と使用方法を定義する。
構成と前提 前提として、リソースの所有者（人類であってもよい）が、クライアントアプリに、認証が必要なリソースへのアクセスをさせたいとする。例えば、メールアドレスを付与されている個人がメールボックスに入っているメールを確認するためにクライアントアプリを通じてメールボックスのデータにアクセスしたい場合など。POP3でもIMAPでもいいが、基本的に人類は毎日温かみのあるcURLを書くわけではなく、サンダーバードちゃんなどにそこらへんを全部任せているので、クライアントを想定するのは必須である。
構成は以下の通り。
// 構成 Tokenの発行 認証が必要なリソースへのアクセスを考えると、とりあえずは以下のような手順を取ることになる。
リソース所有者がクライアントに認証が必要なリソースへのアクセスを指示する クライアントは認可サーバーに問い合わせて、リソース所有者にクライアントを認可してもらう 所有者に認可されたクライアントは認可サーバーにトークンを発行してもらう クライアントはトークンをリソースに提示する では認可のための、認可コードによる付与形式という機構を考えよう。クライアントアプリ側でリソース所有者による認可が必要だと判断したとき、以下のようなことが行われる。
クライアントは所有者を認可サーバーの認可エンドポイントへリダイレクトする。ステータスコードは302とか。その他に、ヘッダーにスコープを埋め込むことでトークンの権限範囲を指定する。 所有者は認可サーバーでクライアントの権限などを認識した上でクライアントを認可する。 認可サーバーは所有者をクライアントへ認可コードと共に送る。これはURIにcode=???として埋め込まれる クライアントは認可コードと自身の認証情報を認可サーバーに送る。認可サーバーは認可コードが3.で発行されたものであることを検証し、問題がなければトークンを発行する。 クライアントはトークンを得て、リソースにアクセスする。 なんらかのサービスのAPIを利用しようとした時にBearer Tokenがなんちゃら&amp;hellip;と言われると思うが、そのBearer Tokenはこのアクセストークンである。
// ず もちろんトークンには有効期限があるので、トークンを新たにリクエストするためのリフレッシュトークンというものも存在する。リフレッシュトークンの仕組みは単純であり、
認可サーバーにリフレッシュトークンと古いアクセストークンを送る 新しいアクセストークンが返送される という形でアクセストークンを新しくすることができる。
OAuthは認証ではない 要追記
セキュリティ 要追記
実装とか 要追記
参考文献 https://www.rfc-editor.org/rfc/rfc6749 </description>
    </item>
    
    <item>
      <title>ふりかえり2022</title>
      <link>https://miso.sabanium.me/post/throwback2022/</link>
      <pubDate>Mon, 19 Dec 2022 00:16:14 +0900</pubDate>
      
      <guid>https://miso.sabanium.me/post/throwback2022/</guid>
      <description>これはRICORA言語班 Advent Calendarの22日目の記事です。
昨日はKakudoさんのRustでもグローバル変数でした。普通にwebサイトがかっこよくてすごい。前日に題材変えてすみません。OAuthに関しては将来の自分に頼みました。書くことがなさすぎる。
ふりかえり 2022年はハッカソンなどに出たり出なかったりバイトに行ったり行かなかったりレポートを出したり出さなかったりしていた。あとは真人間なのでツイッターをやめた。
経験知：やったほうがいいことまとめ 俺は〇〇できます・〇〇できませんと叫んだほうがいい
基本的に人間は未来予測が正確にできないため、だいたいできる！！！！！といってできないことが多い（3敗）ので見極めが大事 打ち返す速度を上げる
納期がまあまあ遠くてもちゃんと仕事をしないと前日になる ちゃんと仕事をするという信頼を得ることがかなり大事だと思う 課題とかでまあまあ疲れると手慣れたプログラムしか書けない つまりある程度認知的にバッファを持って色々やったほうがよい slackではメンションをつける 要件を詰める
めんどいが詰めないともっとめんどいことになりがち 学生同士でなんかすると雰囲気でなんかやりがちだけど割と個人タスクがわからなくなるので（人間も）詰めたほうがいい 他人に対して期待しない
あなたにも色々タスクがあるように皆も色々タスクがある 適度に発話する
話さないと存在が認知されない 話しすぎるとコミュニケーションではない 話している内容に意味がなくとも人間ごっこの練習だと思って聞くと良い 寝る
夜は寝たほうがいい。寝ないと体力が欠乏して社会か学業か労働のどれかがめちゃくちゃになる。ぼくのばあいしゃかいはそんざいしていませんでした。かなしいね。 人生について考えない
はい。 恋愛・結婚・老後が概ね幼年期の刷り込みとしてあるので、30くらいで死ぬと想定してそれらを滅却する 今年の失敗シリーズ 失敗談１：3週間のハッカソンのプロダクトを前日に作ることになった
対処法
メンバーがGithubを知っているか・ユーザーアカウント・コミット数がある程度あることなどを確認する ビジネスサイドをかじった人間には強制的にタスクを振ったりリーダーをやらせたりしてそれっぽく振る舞わせて、手持ち無沙汰にさせない タスクをあげないと動けない人にはスキルセットなどをちゃんと共有してもらい、自分が話している内容を理解しているか確認する タイムスケジュールを管理する人をちゃんと選定しておく（人格で） 失敗談２：「〇〇くん知ってる？あ、知らないか」という音声を聞き取ってしまう
対処法
記憶に残ると苦しいので、酒とかでいい感じに鈍麻になったほうがいい 学部での社会生活はないですけどそれ以外ではあって正常な人間ですよ！というアピールをできる感じの言葉で打ち返したほうがいい 同人音声で上書きする（Project E.L.Cさんとアクア・アルタさん、ありがとうございます） 失敗談3：家から出られない日が発生する
対処法
家から出ない 大学のことを忘れて14時間くらい寝る。その後飯を食う。また寝るを繰り返す 大学に行く場合はノイキャンイヤホンで音楽を聞き、周囲から切断される 失敗談4:　ノイキャンイヤホンを２つ紛失する
対処法
買わないと大学で苦しいので買う 買わない 多分また買います あとは正常に人間とのコミュニケーションが取れませんx10とか書類選考落ちましたx4とかです。俺ってどうしたらいいですか。</description>
    </item>
    
    <item>
      <title>nvimの設定まとめがき(2022)</title>
      <link>https://miso.sabanium.me/post/nvim/</link>
      <pubDate>Thu, 15 Dec 2022 00:16:14 +0900</pubDate>
      
      <guid>https://miso.sabanium.me/post/nvim/</guid>
      <description>これはRICORA言語班 Advent Calendarの24日目の記事です。クリスマスってなんにゃ?
背景 新たに今年Thinkpad X270を購入して破壊したり、なんか人生に疲れたのでubuntuを破壊してdebianにするなどの行動を行っていたらvimもなんとなくneovimにしたほうがいい気がしてきました（正確にはcoc.nvimなどの補完機能がついていること、もともとnvimを敬遠していたのが:termを使うとなんか嫌な感じだった→使わなくなったなどの理由です）。config等の管理は大体破綻するので、明示的にそれを書き残すことで備忘します。
プラグインなど プラグイン管理はvim-plugでしています。プラグインは以下の通り。
coc.nvim vim-sandwich nerdtree vim-snippets preview-markdown fern gina nerdtreeとcocは使っているがほかは&amp;hellip;
coc-nvimの設定 うんち
おわりに もうちょっとちゃんとnvimしたほうがいいよと思いました。2023はnvimの年にしようと思います。</description>
    </item>
    
    <item>
      <title>RaspberryPiからの動画配信について</title>
      <link>https://miso.sabanium.me/post/rpi-video/</link>
      <pubDate>Fri, 02 Dec 2022 00:00:00 +0900</pubDate>
      
      <guid>https://miso.sabanium.me/post/rpi-video/</guid>
      <description>これはRICORA言語班 Advent Calendarの8日目の記事です。
背景 研究に使う可能性があるのでメモとして載せておく。ローカルネットワークでの利用をまず考えている。
結論 ffmpegを使おう。
ffmpegは公式でA complete, cross-platform solution to record, convert and stream audio and video.と名乗っているわけなので、もちろんstreamもできるわけである。
構成はこんなかんじ。あまりにも図の出来が良すぎて失神している。
+--------+ | camera | +--------+ | USB +--------+ +--------+ | rspi | [wifi IEEE 802.11/?] --- *LAN* --- [wifi / ethernet] | debian | +--------+ +--------+ 現在使っているのはデスクトップつきRaspibianであり、他の人があいまいにドライバを入れた可能性もあるが、カメラは一発で認識できていて、/dev/video0にある(もちろん、時と共に移ろいゆく)。動作確認はVLCとかで画面に映し、挙動を監視するとできる。
さて、いまRaspiberry Piで見えている画面をいい感じに同一LANの中にいるクライアントに送りたいとする。まず検討すべきことは
ffmpegのオプション 配信におけるIPプロトコル（TCP / UDP どっち？） の二点だと考えられる。もちろんffmpeg以外のツールもあるが、いまはffmpegの話をしているので多分これでよい。
RaspberryPiでやるべきこと まず、オプションがありすぎるので適当に先人のログなどを拝見させてもらおう。ありがとうございます！1つ目に関しては、特に無自覚にraspividが使えるかのように書かれているものの、raspividが使えるのは専用のカメラモジュールに限定されているようなので、注意が必要。
そのうえで、オプションを考えよう。マニュアルが長いが、まあ-iがインプットでレート操作・動画サイズの変更などができることがわかればよい。とりあえずピクセルレートとかは最適にしてくれるっぽい（？）ので、適当なコーデックといい感じの-preset ultrafast、-tune zerolatencyを指定することにする。動画のフォーマットはmpegtsにして、一旦は配信用にする。録画すると.tsの拡張子のファイルが生成されるが、それをぶち込んで.mp4のファイルを作ればよいはずなので、あまり問題はないと思っている。
コーデックに関しては、h264よりもh265の方が後継規格なのでよいが、まだ広まっていない（？）可能性もあるらしい。とりあえずh265を採用して見えなかったらh264にスイッチするという運用でもこのスケールなら問題ないように思える。付記しておくが、h266も策定されたようなので、数年のうちにはそちらへの移行が始まる可能性が高い。
パケットサイズについてはネットワーク依存なのでよくわからないという感想が強いので、一旦は指定していないが、今後指定する可能性はある。例えばTCPはPMTUDを利用してパケットサイズを決めている。1300byteとか1000byteとかに指定するのが妥当かもしれない。
で、これらを鑑みると
ffmpeg \ -i /dev/video0 \ -vcodec libx265 \ -preset ultrafast \ -tune zerolatency \ -f mpegts \ udp://[client ip addr]:[port]&amp;amp;pkt_size=(.</description>
    </item>
    
  </channel>
</rss>
